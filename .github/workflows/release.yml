name: release-application

on:
  pull_request:
    types: [ closed ]
    branches:
      - master

env:
  applicationName: SimpleVolumeMixer
  buildConfigrationName: Release
  buildPlatformName: Any CPU
  pathOfSolution: ${{ github.workspace }}\SimpleVolumeMixer.sln
  pathOfVersioning: ${{ github.workspace }}\SimpleVolumeMixer

jobs:
  build-artifact:
    runs-on: windows-2019
    if: github.event.pull_request.merged == true
    
    outputs:
      artifactName: ${{ steps.vars.outputs.artifactName }}
      artifactVersion: ${{ steps.vars.outputs.applicationVersion }}
      prereleaseVersionNoLeadingHyphen: ${{ steps.nbgv.outputs.PrereleaseVersionNoLeadingHyphen }}
    
    steps:

      - name: setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.1.x
            5.x
            6.x

      - name: checkout this solution
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: setup versioning
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true
          path: ${{ env.pathOfVersioning }}

      - name: vars
        id: vars
        env:
          applicationVersion: ${{ steps.nbgv.outputs.NuGetPackageVersion }}
        run: |
          echo "::set-output name=applicationVersion::${{ env.applicationVersion }}"
          echo "::set-output name=artifactName::${{ env.applicationName }}-${{ env.applicationVersion }}-net48"

      - name: build and test
        id: build-and-test
        uses: ./.github/actions/build-and-test
        with:
          solution: ${{ env.pathOfSolution }}
          buildConfiguration: ${{ env.buildConfigrationName }}
          buildPlatform: ${{ env.buildPlatformName }}

      - name: collect artifacts
        id: collect-artifacts
        uses: ./.github/actions/collect-artifacts
        with:
          applicationName: ${{ env.applicationName }}
          applicationVersion: ${{ steps.vars.outputs.applicationVersion }}
          buildConfiguration: ${{ env.buildConfigrationName }}
          buildPlatform: ${{ env.buildPlatformName }}
          artifactName: ${{ steps.vars.outputs.artifactName }}

  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    needs: build-artifact
    outputs:
      uploadUrl: ${{ steps.export-upload-url.outputs.uploadUrl }}
    
    steps:
      - id: vars
        shell: bash
        run: |
          if { [ "${{ needs.build-artifact.outputs.prereleaseVersionNoLeadingHyphen }}" = "beta" ] } || { [ "${{ needs.build-artifact.outputs.prereleaseVersionNoLeadingHyphen }}" = "alpha" ] }; then
            echo "::set-output name=isPrerelease::true";
          else
            echo "::set-output name=isPrerelease::false";
          fi;
        
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.build-artifact.outputs.artifactVersion }}"
          release_name: "v${{ needs.build-artifact.outputs.artifactVersion }}"
          draft: false
          prerelease: ${{ steps.vars.outputs.isPrerelease }}

      - id: export-upload-url
        run: |
          echo "::set-output name=uploadUrl::${{ steps.create-release.outputs.upload_url }}"


  upload-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    needs: [ create-release, build-artifact ]
    env:
      artifactName: ${{ needs.build-artifact.outputs.artifactName }}
      artifactVersion: ${{ needs.build-artifact.outputs.artifactVersion }}
      prereleaseVersionNoLeadingHyphen: ${{ needs.build-artifact.outputs.prereleaseVersionNoLeadingHyphen }}
      uploadUrl: ${{ needs.create-release.outputs.uploadUrl }}
    
    steps:

      - name: echo
        run: |
          echo "${{ env.artifactName }}"
          echo "${{ env.artifactVersion }}"
          echo "${{ env.prereleaseVersionNoLeadingHyphen }}"

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.artifactName }}
          path: ./${{ env.artifactName }}

      - name: pwd
        run: |
          ls -la
          ls -la ./${{ env.artifactName }}

      - name: compress to zip
        run: |
          zip -r ${{ env.artifactName }}.zip ./${{ env.artifactName }}

      - name: upload release assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.uploadUrl }}
          asset_path: ./${{ env.artifactName }}.zip
          asset_name: ${{ env.artifactName }}.zip
          asset_content_type: 'application/zip'